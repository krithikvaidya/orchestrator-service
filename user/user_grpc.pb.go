// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Orchestrator1ServiceClient is the client API for Orchestrator1Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Orchestrator1ServiceClient interface {
	GetUserByName(ctx context.Context, in *UserName, opts ...grpc.CallOption) (*User, error)
}

type orchestrator1ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrchestrator1ServiceClient(cc grpc.ClientConnInterface) Orchestrator1ServiceClient {
	return &orchestrator1ServiceClient{cc}
}

func (c *orchestrator1ServiceClient) GetUserByName(ctx context.Context, in *UserName, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/user.Orchestrator1Service/GetUserByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Orchestrator1ServiceServer is the server API for Orchestrator1Service service.
// All implementations must embed UnimplementedOrchestrator1ServiceServer
// for forward compatibility
type Orchestrator1ServiceServer interface {
	GetUserByName(context.Context, *UserName) (*User, error)
	mustEmbedUnimplementedOrchestrator1ServiceServer()
}

// UnimplementedOrchestrator1ServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrchestrator1ServiceServer struct {
}

func (UnimplementedOrchestrator1ServiceServer) GetUserByName(context.Context, *UserName) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByName not implemented")
}
func (UnimplementedOrchestrator1ServiceServer) mustEmbedUnimplementedOrchestrator1ServiceServer() {}

// UnsafeOrchestrator1ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Orchestrator1ServiceServer will
// result in compilation errors.
type UnsafeOrchestrator1ServiceServer interface {
	mustEmbedUnimplementedOrchestrator1ServiceServer()
}

func RegisterOrchestrator1ServiceServer(s grpc.ServiceRegistrar, srv Orchestrator1ServiceServer) {
	s.RegisterService(&Orchestrator1Service_ServiceDesc, srv)
}

func _Orchestrator1Service_GetUserByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Orchestrator1ServiceServer).GetUserByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Orchestrator1Service/GetUserByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Orchestrator1ServiceServer).GetUserByName(ctx, req.(*UserName))
	}
	return interceptor(ctx, in, info, handler)
}

// Orchestrator1Service_ServiceDesc is the grpc.ServiceDesc for Orchestrator1Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Orchestrator1Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.Orchestrator1Service",
	HandlerType: (*Orchestrator1ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserByName",
			Handler:    _Orchestrator1Service_GetUserByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

// Orchestrator2ServiceClient is the client API for Orchestrator2Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Orchestrator2ServiceClient interface {
	GetUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
}

type orchestrator2ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrchestrator2ServiceClient(cc grpc.ClientConnInterface) Orchestrator2ServiceClient {
	return &orchestrator2ServiceClient{cc}
}

func (c *orchestrator2ServiceClient) GetUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/user.Orchestrator2Service/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Orchestrator2ServiceServer is the server API for Orchestrator2Service service.
// All implementations must embed UnimplementedOrchestrator2ServiceServer
// for forward compatibility
type Orchestrator2ServiceServer interface {
	GetUser(context.Context, *User) (*User, error)
	mustEmbedUnimplementedOrchestrator2ServiceServer()
}

// UnimplementedOrchestrator2ServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrchestrator2ServiceServer struct {
}

func (UnimplementedOrchestrator2ServiceServer) GetUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedOrchestrator2ServiceServer) mustEmbedUnimplementedOrchestrator2ServiceServer() {}

// UnsafeOrchestrator2ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Orchestrator2ServiceServer will
// result in compilation errors.
type UnsafeOrchestrator2ServiceServer interface {
	mustEmbedUnimplementedOrchestrator2ServiceServer()
}

func RegisterOrchestrator2ServiceServer(s grpc.ServiceRegistrar, srv Orchestrator2ServiceServer) {
	s.RegisterService(&Orchestrator2Service_ServiceDesc, srv)
}

func _Orchestrator2Service_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Orchestrator2ServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Orchestrator2Service/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Orchestrator2ServiceServer).GetUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

// Orchestrator2Service_ServiceDesc is the grpc.ServiceDesc for Orchestrator2Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Orchestrator2Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.Orchestrator2Service",
	HandlerType: (*Orchestrator2ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _Orchestrator2Service_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

// MockUserDataServiceClient is the client API for MockUserDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MockUserDataServiceClient interface {
	GetMockUserData(ctx context.Context, in *UserName, opts ...grpc.CallOption) (*User, error)
}

type mockUserDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMockUserDataServiceClient(cc grpc.ClientConnInterface) MockUserDataServiceClient {
	return &mockUserDataServiceClient{cc}
}

func (c *mockUserDataServiceClient) GetMockUserData(ctx context.Context, in *UserName, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/user.MockUserDataService/GetMockUserData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MockUserDataServiceServer is the server API for MockUserDataService service.
// All implementations must embed UnimplementedMockUserDataServiceServer
// for forward compatibility
type MockUserDataServiceServer interface {
	GetMockUserData(context.Context, *UserName) (*User, error)
	mustEmbedUnimplementedMockUserDataServiceServer()
}

// UnimplementedMockUserDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMockUserDataServiceServer struct {
}

func (UnimplementedMockUserDataServiceServer) GetMockUserData(context.Context, *UserName) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMockUserData not implemented")
}
func (UnimplementedMockUserDataServiceServer) mustEmbedUnimplementedMockUserDataServiceServer() {}

// UnsafeMockUserDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MockUserDataServiceServer will
// result in compilation errors.
type UnsafeMockUserDataServiceServer interface {
	mustEmbedUnimplementedMockUserDataServiceServer()
}

func RegisterMockUserDataServiceServer(s grpc.ServiceRegistrar, srv MockUserDataServiceServer) {
	s.RegisterService(&MockUserDataService_ServiceDesc, srv)
}

func _MockUserDataService_GetMockUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockUserDataServiceServer).GetMockUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.MockUserDataService/GetMockUserData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockUserDataServiceServer).GetMockUserData(ctx, req.(*UserName))
	}
	return interceptor(ctx, in, info, handler)
}

// MockUserDataService_ServiceDesc is the grpc.ServiceDesc for MockUserDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MockUserDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.MockUserDataService",
	HandlerType: (*MockUserDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMockUserData",
			Handler:    _MockUserDataService_GetMockUserData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
